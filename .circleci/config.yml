version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.11.1
  docker: circleci/docker@2.0.1
  aws-ecr: circleci/aws-ecr@7.3.0

jobs:

  lint:
     docker:
       - image: python:3.7.3-stretch
     working_directory: ~/repo
     steps:
       - checkout
       - run:
           name: install dependencies
           command: |
               python3 -m venv venv
               . venv/bin/activate
               make install
               # Install hadolint
               wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
               chmod +x /bin/hadolint
       - run:
           name: run lint
           command: |
               . venv/bin/activate
               make lint


    # machine: true
    # steps:
    # - docker/check:
    #     docker-username: DOCKER_USER  # DOCKER_LOGIN is the default value, if it exists, it automatically would be used.
    #     docker-password: DOCKER_PASS  # DOCKER_PASSWORD is the default value
    # - docker/build:
    #     image: $DOCKER_USER/caps
    # - docker/push:
    #     image: $DOCKER_PASS/orb-caps

  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Production Cluster

  deployment-g:
     executor: aws-eks/python3
     parameters:
       cluster-name:
         description: |
           Name of the EKS cluster
         type: string
     steps:
       - checkout
       - aws-eks/update-kubeconfig-with-authenticator:
           cluster-name: << parameters.cluster-name >>
           install-kubectl: true
       - kubernetes/create-or-update-resource:
           resource-file-path: deployment-g.yaml
           resource-name: deployment/nginx-deployment-g
       - run:
           name: verify deployment works
           command: |
             kubectl get all
  
  deployment-b:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
      steps:
        - checkout
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
            install-kubectl: true
        - kubernetes/create-or-update-resource:
            get-rollout-status: true
            resource-file-path: deployment-b.yaml
            resource-name: deployment/nginx-deployment-b
        - run:
            name: verify new deployment works
            command: |
              kubectl get all

workflows:
  default:
    jobs:
      - lint
      - aws-ecr/build-and-push-image:
          requires:
            - lint
          region: AWS_DEFAULT_REGION
          repo: caps
          tag: latest
      - test-cluster:
          requires:
            - lint 
            - aws-ecr/build-and-push-image
          cluster-name: production
      - deployment-g:
          cluster-name: production
          requires:
            - test-cluster
      - deployment-b:
          cluster-name: production
          requires:
            - deployment-g
